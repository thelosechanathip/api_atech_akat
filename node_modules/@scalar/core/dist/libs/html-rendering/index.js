import { htmlRenderingConfigurationSchema, apiReferenceConfigurationSchema } from '@scalar/types/api-reference';

/**
 * The HTML document to render the Scalar API reference.
 *
 * We must check the passed in configuration and not the parsedConfig for the theme as the parsedConfig will have it
 * defaulted to 'default'
 */
const getHtmlDocument = (configuration, customTheme = '') => {
    const { cdn, pageTitle, ...rest } = configuration;
    const parsedHtmlOptions = htmlRenderingConfigurationSchema.parse({ cdn, pageTitle, customTheme });
    const parsedConfig = apiReferenceConfigurationSchema.parse(rest);
    return `
    <!DOCTYPE html>
    <html>
      <head>
        <title>${parsedHtmlOptions.pageTitle}</title>
        <meta charset="utf-8" />
        <meta
          name="viewport"
          content="width=device-width, initial-scale=1" />
        <style>
          ${configuration.theme ? '' : customTheme}
        </style>
      </head>
      <body>
        ${getScriptTags(parsedConfig, parsedHtmlOptions.cdn)}
      </body>
    </html>
  `;
};
/**
 * The script tags to load the @scalar/api-reference package from the CDN.
 */
function getScriptTags(configuration, cdn) {
    return `
      <script
        id="api-reference"
        type="application/json"
        data-configuration="${getConfiguration(configuration)}">${getScriptTagContent(configuration)}</script>
        <script src="${cdn}"></script>
    `;
}
/**
 * The configuration to pass to the @scalar/api-reference package.
 */
const getConfiguration = (givenConfiguration) => {
    // Clone before mutating
    const configuration = {
        ...givenConfiguration,
    };
    if (!configuration.spec?.url) {
        delete configuration.spec;
    }
    else if (configuration.spec?.content) {
        delete configuration.spec?.content;
    }
    return JSON.stringify(configuration).split('"').join('&quot;');
};
/**
 * The content to pass to the @scalar/api-reference package as the <script> tag content.
 */
const getScriptTagContent = (configuration) => configuration.spec?.content
    ? typeof configuration.spec?.content === 'function'
        ? JSON.stringify(configuration.spec?.content())
        : JSON.stringify(configuration.spec?.content)
    : '';

export { getConfiguration, getHtmlDocument, getScriptTagContent, getScriptTags };
